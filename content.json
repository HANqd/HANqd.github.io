{"meta":{"title":"HANqd's BLOG","subtitle":"一个刚进军安全的小白。","description":null,"author":"HANqd","url":"https://hanqd.github.io","root":"/"},"pages":[],"posts":[{"title":"每日一题 1004","slug":"每日一题1004","date":"2019-03-27T03:00:27.982Z","updated":"2019-03-27T03:01:42.623Z","comments":true,"path":"2019/03/27/每日一题1004/","link":"","permalink":"https://hanqd.github.io/2019/03/27/每日一题1004/","excerpt":"1004 成绩排名题目描述读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。","text":"1004 成绩排名题目描述读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 输入格式：每个测试输入包含 1 个测试用例，格式为第 1 行：正整数 n第 2 行：第 1 个学生的姓名 学号 成绩第 3 行：第 2 个学生的姓名 学号 成绩 … … …第 n+1 行：第 n 个学生的姓名 学号 成绩 其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。 输出格式：对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。 题目解析：只需找到成绩最高和最低的学生，在和其学号和姓名对应起来即可。 C++代码：代码一：使用结构体1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;using namespace std;int main()&#123; //定义一个名字为student的结构体，有三个成员 struct student &#123; char a[11]; char b[11]; int grade; &#125;; //定义三个变量，结构体类型，其中s是所有学生，max是最大值，min是标记最小值的 student s,max,min; int n; cin&gt;&gt;n; cin&gt;&gt;s.a&gt;&gt;s.b&gt;&gt;s.grade; max=min=s; //先假设最大和最小值是第一个学生 //拿第一个的分数分别和其他n-1个学生相比 for(int i=1;i&lt;n;i++) &#123; cin&gt;&gt;s.a&gt;&gt;s.b&gt;&gt;s.grade; if(s.grade&gt;max.grade) max=s; if(s.grade&lt;min.grade) min=s; &#125; //max和min已经在上边的循环中指向最大最小的学生，在引用它们的成员即可 cout&lt;&lt;max.a&lt;&lt;&quot; &quot;&lt;&lt;max.b&lt;&lt;endl; cout&lt;&lt;min.a&lt;&lt;&quot; &quot;&lt;&lt;min.b&lt;&lt;endl; return 0;&#125; 代码二：123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;int main()&#123; int n; cin&gt;&gt;n; string a[n+1],b[n+1]; int grade[n]; int max=0,min=100,s,k;//s,k分别记录最大值和最小值的下标 for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;grade[i]; &#125; for(int j=0;j&lt;n;j++) &#123; if(grade[j]&gt;max) &#123; max=grade[j]; s=j; &#125; if(grade[j]&lt;min) &#123; min=grade[j]; k=j; &#125; &#125; cout&lt;&lt;a[s]&lt;&lt;&quot; &quot;&lt;&lt;b[s]&lt;&lt;endl; cout&lt;&lt;a[k]&lt;&lt;&quot; &quot;&lt;&lt;b[k]&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[]},{"title":"Web calculator","slug":"Web calculate","date":"2019-03-26T12:39:08.259Z","updated":"2019-03-26T12:45:33.555Z","comments":true,"path":"2019/03/26/Web calculate/","link":"","permalink":"https://hanqd.github.io/2019/03/26/Web calculate/","excerpt":"Calculator题目描述","text":"Calculator题目描述 打开链接，网页如下 做题准备 安装requests库网址：http://cn.pythonrequests.org/zh_CN/latest/user/install.html#install我是Windows系统，选择安装的压缩包，解压缩后，把整个文件夹复制到Python的Lib目录下即可。 requests库的使用 http://cn.python-requests.org/zh_CN/latest/user/quickstart.html#url 题目分析要用1.5s计算出结果，并且每次刷新calculator，算数表达式都会变，那么按照平常的计算方式肯定是行不通的，根据题目提示，可以用requests库来解决，要解决的问题： 怎样从服务器那获得算术表达式，计算出结果？ 怎样把计算出的结果提交给服务器？ 让服务器知道获取算式和提交结果的是一个人？ 解题步骤 问题1：需要爬取网页信息，用正则表达式。（导入re模块）Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。 问题2：requests里的get传递 URL 参数你也许经常想为 URL 的查询字符串(query string)传递某种数据。如果是手工构建 URL，那么数据会以键/值对的形式置于 URL 中，跟在一个问号的后面。例如， httpbin.org/get?key=val。 Requests 允许你使用 params 关键字参数，以一个字符串字典来提供这些参数。举例来说，如果你想传递 key1=value1 和 key2=value2 到 httpbin.org/get ，那么可以使用如下代码： 12payload = &#123;'key1': 'value1', 'key2': 'value2'&#125;r = requests.get(\"http://httpbin.org/get\", params=payload) 问题3：使用session会话session是一次浏览器和服务器的会话对象，session也是缓存，是内容，是块数据。因为我们访问网页使用的HTTP协议是无状态的，没有任何关系，快速的。所以我们如果想要关联客户的信息就需要一种办法能够把客户的信息联系在一起，这个方法就是cookie。但是cookie是把信息储存在用户本地，它在一个域名下是全局的。不安全又很容易的被修改。所以session就出现了，它储存在服务器上，通过它关联同一个用户的信息，这样用户在访问不同的页面的时候我们就知道对方是同一个人，而不需要每次无状态的访问都需要用户登录/关联了。 脚本代码1234567891011import requestsimport res = requests.Session()t = s.get('http://123.207.149.64:23331/calculator/')print(t.text)value = re.compile(r'&lt;form action=\"\" method=\"GET\"&gt;&lt;span id=\"exp\"&gt;(.*?)&lt;/span&gt;')n = re.findall(value, t.text, re.S | re.M)print('result:\\n\\n%s=%d\\n' % (n, eval(n)))ans = eval(n)f = t.get('http://123.207.149.64:23331/calculator/', params=&#123;'answer': ans&#125;)print(f.text) 结果运行时出现错误：AttributeError: module ‘requests’ has no attribute ‘session’，查了安装的requests库，里边有session模块，但就是运行说没有！！查了好多原因，也重装了requests，还是不行，做这个题用了太长时间了，今天脑子被他弄得晕晕的，决定明天在弄。","categories":[],"tags":[]},{"title":"每日一题 1003","slug":"每日一题1003","date":"2019-03-26T03:17:36.805Z","updated":"2019-03-26T04:01:20.619Z","comments":true,"path":"2019/03/26/每日一题1003/","link":"","permalink":"https://hanqd.github.io/2019/03/26/每日一题1003/","excerpt":"1003 我要通过题目描述“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。得到“答案正确”的条件是：","text":"1003 我要通过题目描述“答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。得到“答案正确”的条件是： 字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。 输入格式：每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。 输出格式：每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。 题目分析 条件1：字符串仅有P、A、T这三个字符，包括其他字符则答案错误； 条件2：xPATx形式的字符串正确，其中x为空字符串或者A，例如：PAT、APATA、AAPATAA，要求P左边的A的个数和T右边的个数一样，并且P和T仅有一个； 条件3：aPbTc是正确的，则aPbATca也是正确的，其中a,b,c为空字符串或者A，例如：APATA、APAATAA、AAPATAA、AAPAATAAAA根据P左边，T右边和P、T中间的A的个数来看，可找到规律，即left*mid=right,即答案正确。 C++代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;iostream&gt; #include &lt;string.h&gt; using namespace std; int main() &#123; int n; cin&gt;&gt;n; string a; int len=0; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;a; //p是P的个数，t是T的个数，left是P左边A的个数，mid,right分别是对应位置A的个数 int p=0,t=0,left=0,mid=0,right=0; len=a.length(); for(int j=0;j&lt;len;j++) &#123; //字符串为A，并且前面没出现过P和T，P左边A的个数 if(a[j]=='A'&amp;&amp;p==0&amp;&amp;t==0) &#123; left++; continue; &#125; //P的个数 if(a[j]=='P') &#123; p++; continue; &#125; //中间A的个数，前面出现了P且个数为1，前面不能出现T if(a[j]=='A'&amp;&amp;p==1&amp;&amp;t==0) &#123; mid++; continue; &#125; //T的个数，并且前边P和T中间出现了A，防止出现PT情况 if(a[j]=='T'&amp;&amp;mid&gt;=1) &#123; t++; continue; &#125; //右边A的个数，前边出现了P和T，个数为1 if(a[j]=='A'&amp;&amp;p==1&amp;&amp;t==1) &#123; right++; continue; &#125; else &#123; break; &#125; &#125; //判断条件：P和T的个数为1，A的个数：左边乘中间等于右边，输出YES if(p==1&amp;&amp;t==1&amp;&amp;(left*mid==right)) &#123; cout&lt;&lt;\"YES\"&lt;&lt;endl; &#125; else &#123; cout&lt;&lt;\"NO\"&lt;&lt;endl; &#125; &#125; return 0; &#125;","categories":[],"tags":[]},{"title":"Python笔记——数据类型（整数、浮点数、数据类型转换）","slug":"Python数据类型（整数、浮点数、数据类型转换）","date":"2019-03-18T08:38:50.653Z","updated":"2019-03-18T09:06:28.161Z","comments":true,"path":"2019/03/18/Python数据类型（整数、浮点数、数据类型转换）/","link":"","permalink":"https://hanqd.github.io/2019/03/18/Python数据类型（整数、浮点数、数据类型转换）/","excerpt":"今天安装了pycharm,界面很好看，是一款好用的编译器。继续学习Python！","text":"今天安装了pycharm,界面很好看，是一款好用的编译器。继续学习Python！ 整数（int）&emsp; 整数包括正整数、负整数和零。Python中的整数范围是很大的。Python中整数还可以以几种不同的进制进行书写。0+“进制标志”+数字代表不同进制的数，进制标志有以下几种： 0o[0O]数字 表示八进制整数（例如：0o24/0O24） 0x[0X]数字 表示十六进制整数（例如：0x3F/0X3F） 0b[0B]数字 表示二进制整数（例如：0b101/0B101） 不带进制标志的为十进制数。&emsp; 注意：每种进制开头数字都是0；八进制的数字0后是小写字母o或大写字母O；但十进制不得以数字0开头书写；每种进制书写时数码不得超过进制规定的数码范围。整数运算符 运算符 描述 ** 乘方运算符 * 乘法运算符 / 除法运算符 // 整除运算符 % 取余运算符 + 加法运算符 - 减法运算符 &#124; 位或 ^ 位异或 &amp; 位与 &lt;&lt; 左移运算 &gt;&gt; 右移运算 “//”运算符就是取商而丢弃余数，比如:14//4=3|、^、&amp;、&lt;&lt;、&gt;&gt;运算符都是位运算符，要依据二进制形式进行运算。 运算符优先级从高到低排列如下： ** *、/、% +、- |、^、&amp;、&lt;&lt;、&gt;&gt; 在同一个式子中，可以使用括号来修改运算符的优先级，即括号具有最高优先级。不必强记运算符的优先级，在没有把握的情况下可以运用括号。注意：“/”运算符的运算结果为浮点数，即时是两个整数相除。 浮点数（float）浮点数就是常用的带小数的数，当然整数部分也可以为零。浮点数的书写除了一般形式（如3.14）外，还有以下几种表示方法： 19. 小数部分为零，可以不写； .098 整数部分为零，可以不写； -2e3 科学计数法，表示-2*10^3 类型转换Python中常用的数据类型的相互转换，所使用函数如下： str(object=’’) 可以将整数和浮点数转换为字符串，默认建立空字符串 int(x,base=10) 将数字字符串或数值转换为整数（base表示进制） float(x) 将字符串或数值转换为浮点数 此外：str()可以创建一个空字符串，int()也可以建立一个默认值为0的整数，float()可以建立一个默认值为0.0的浮点数。【实例】注意：将字符串形式的数值转换为整数时，其中只能包含数字。input()函数接受键盘输入时，无论输入的是整数、浮点数还是字符串，Python得到的都是字符串，那么当需要整数或浮点数时都要进行类型转换。","categories":[],"tags":[]},{"title":"Python笔记——数据类型（字符串）","slug":"Python数据类型（字符串）","date":"2019-03-17T14:32:02.464Z","updated":"2019-03-17T14:56:50.802Z","comments":true,"path":"2019/03/17/Python数据类型（字符串）/","link":"","permalink":"https://hanqd.github.io/2019/03/17/Python数据类型（字符串）/","excerpt":"字符串主要用于存储和表示文本。Python中的字符串通常由“ ‘ ”、双引号“ “” ”、三个单引号或三个双引号包围的一串字符组成。","text":"字符串主要用于存储和表示文本。Python中的字符串通常由“ ‘ ”、双引号“ “” ”、三个单引号或三个双引号包围的一串字符组成。 Python的简单数据类型字符串 字符串主要用于存储和表示文本。Python中的字符串通常由“ ‘ ”、双引号“ “” ”、三个单引号或三个双引号包围的一串字符组成。 注意：单引号和双引号都是英文字符中的符号。 三种表示方法的区别和联系： 单引号字符串与双引号字符串本质上是相同的。但是单引号字符串里边不允许再出现单引号，例如：’aa’ss’cc’，这种是错误的，但是可以使用转义字符来输出’：’aaa”ss”aa’，这样正确，同理，双引号字符串也是，双引号里不能再出现双引号，但可以用转义字符。 三引号字符串可以由多行组成，单引号或双引号不行，当需要使用大段多行的字符串行就使用它。1234'''This is a function.Return a tuple.''' 转义字符串 \\n 换行符 \\t 制表符（Tab） \\r 回车（Enter） \\ “\\”字符 \\’ 单引号字符串中的单引号 \\” 双引号里的双引号 字符串运算“+”：连接字符串乘号 ：单字符串的多次连接‘aaa’+’bbb’ ——&gt;’aaabbb’“python”*3 ——&gt;python python python 字符串处理函数常见的字符串函数 string.capitalize() 将字符串的第一个字母大写 string.count() 获得字符串中某一子字符串的数目 string.find() 获得字符串中某一子字符串的起始位置，无则返回-1 string.isalnum() 检测字符串是仅包含0-9A-Za-z string.isalpha() 检测字符串是仅包含A-Za-z string.isdigit() 检测字符串是仅包含数字 string.islower() 检测字符串是否均为小写字母 string.isspace() 检测字符串中所有字符是否均为空白字符 string.istitle() 检测字符串中的单词是否为首字母大写 string.isupper() 检测字符串是否均为大写字母 string.join() 连接字符串 string.lower() 将字符串全部转换为小写 string.split() 分割字符串 string.swapcase() 将字符串中大写字母转换为小写，小写字母转换为大写 string.title() 将字符串中的单词首字母大写 string.upper() 将字符串中的全部字母转换为大写 len(string) 获取字符串长度 其中split()函数返回以指定的字符将字符串分割成为列表形式并返回，但并不改变原字符串，原型如下：split([sep[,maxsplit]]) sep：可选参数，指定分割的字符，默认为空格 maxsplit：可选参数，分割次数 join()函数将原字符串插入参数字符串中的每两个字符之间。如果参数字符串中只有一个字符，那么返回参数字符串。同样，join()并不改变原字符串，只是返回一个新的字符串。","categories":[],"tags":[]},{"title":"你好，hexo","slug":"你好，hexo","date":"2019-03-15T08:45:25.000Z","updated":"2019-03-15T08:45:25.929Z","comments":true,"path":"2019/03/15/你好，hexo/","link":"","permalink":"https://hanqd.github.io/2019/03/15/你好，hexo/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-15T03:01:22.322Z","updated":"2019-03-16T04:18:31.716Z","comments":true,"path":"2019/03/15/hello-world/","link":"","permalink":"https://hanqd.github.io/2019/03/15/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}